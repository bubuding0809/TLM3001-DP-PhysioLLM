### Generation Agent

from operator import contains
import sys
import os
from typing import List, Optional

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from langchain_core.output_parsers.string import StrOutputParser
from langchain_openai import ChatOpenAI
from langchain_core.output_parsers.json import JsonOutputParser
from langchain.prompts import PromptTemplate
from langchain.output_parsers import PydanticOutputParser
from pydantic import BaseModel, Field
from constants import Llm


class DifferentialDiagnosis(BaseModel):
    """Model for a differential diagnosis generated by the system"""

    diagnosis: str = Field(
        description="The differential diagnosis generated by the system"
    )
    rational: str = Field(
        description="The rationale for the differential diagnosis, steps taken to arrive at the diagnosis"
    )
    ieee_intext_citations: List[str] = Field(
        description="List of references supporting the differential diagnosis, in IEEE format, ie [1], [2], [3] etc"
    )
    # contains_parametric_data: bool = Field(
    #     description="Whether the this diagnosis is derived from parametric data, ie not directly from the provided context/documents"
    # )
    # parametric_data_elaboration: Optional[str] = Field(
    #     description="Elaboration on the parametric data used in the answer, if diagnosis is derived from parametric data"
    # )


class DiagnosisGeneratorOutput(BaseModel):
    """Model for the output of the diagnosis generator, containing a list of differential diagnoses"""

    differential_diagnoses: List[DifferentialDiagnosis] = Field(
        description="List of differential diagnoses generated by the system"
    )
    ieee_references: List[str] = Field(
        description="List of references used in the differential diagnoses, in IEEE format"
    )
    summary: str = Field(
        description="Summary of the differential diagnoses, key points, etc"
    )


parser = PydanticOutputParser(pydantic_object=DiagnosisGeneratorOutput)


PROMPT = """
<|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a expert in physiotherapy, you will be presented with a set of subjective and object assessment and your job is to come up with a well informed and researched differential diagnosis of the medical scenerio.
You will be presented with a set of documents that are retrieved based on the subqueries derived from the patient assessments.
You will be asked to answer a question based on the retrieved context.
You should answer the question based on the retrieved context.
You should provide a well informed and researched answer to the question.
You should provide references to support your answer.

You must follow the following format for your answer:
{format_instructions}

IMPORTANT:
- Only use the retrieved context as the source of ground truth to answer the question.
- If the query is not related to physiotherapy or unrelated from the retrieved context, please answer with "I am sorry, I am not able to answer this question."
- Always include citations and references to support your answer. <|eot_id|>
- If context is not enough to answer the question, you can use parametric data to generate the answer, but make sure to label it as such.
<|start_header_id|>user<|end_header_id|> 

Answer the question based only on the following context, this context should be used as source of ground truth to answer the question.
The retrieved context is a set of documents that are retrieved based on the subqueries derived from the patient assessments.

{context}

---

Answer the question based on the above context: 
{question}<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
"""

llm = ChatOpenAI(model=Llm.GPT_4O, temperature=0.5)

prompt = PromptTemplate(
    template=PROMPT,
    input_variables=["context", "question"],
    partial_variables={"format_instructions": parser.get_format_instructions()},
)
diagnosis_generator = (
    prompt | llm | JsonOutputParser(pydantic_object=DiagnosisGeneratorOutput)
)
